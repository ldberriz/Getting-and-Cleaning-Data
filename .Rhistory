T<-makeCacheMatrix()
T$get()
pp
T$set(pp)
T$get()
T$setInverse()
T$setInverse(T)
T$getInverse()
T$getInverse(T)
T$getInverse()
cacheSolve(T)
T$getInverse()
T$getInverse(T)
T$getInverse()
cacheSolve(T)
cacheSolve(T)
cacheSolve(T)
ls()
source('~/Coursera/ProgrammingAssignment2/practice_makeVector.R')
makeVector <- function(x = numeric()) {
# sets x equal to an empty numeric vector
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean      , getmean = getmean)
}
# This function creates a special "vector", which is really a list of:
#1. set the value of the vector
#2. get the value of the vector
#3. set the value of the mean
#4. get the value of the mean
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
# Practice
a <- makeVector()       # initialize
a                       # shows that a is a list of functions
class(a)                # a is a list
class(a$set)            # set (within a) is a function
a$set(c(1, 2, 3, 4, 5, 6, 7)) # set the function
a$get()                 # returns the vector that was previously "set"
cachemean(a)
cachemean(a)
# Practice
a <- makeVector()       # initialize
a                       # shows that a is a list of functions
class(a)                # a is a list
class(a$set)            # set (within a) is a function
a$set(c(1, 2, 3, 4, 5, 6, 7)) # set the function
a$get()                 # returns the vector that was previously "set"
cachemean(a)
cachemean(a)
tf <- matrix(1:4, 2, 2)         # Creates a matrix
tf
tf1 <- solve(tf)                # solve(tf) calculates the inverse of the matrix tf
tf1
tf %*% tf1                      # %*% is matrix multiplication
# Part 1: makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
# sets x equal to an empty matrix
I <- NULL
# Set the inverse equal to NULL
set <- function(y){
x <<- y
# set function assigns the argument to x
I <<- NULL
# Once the set function is called, Inverse is re-set to NULL (this is important if you redefine the matrix, x)
}
get <- function() x
# get function returns the matrix
setInverse <- function(solve) I <<- solve
# setInverse overrides the previous value of I and assigns the argument to Inverse (which is supposed to be the inverse of matrix x)
getInverse <- function() I
# getInverse returns the Inverse
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
# creates a list of the functions
}
# Part 2: cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
I <- x$getInverse()
# Retrives the most recent value for the inverse
if(!is.null(I)){
message("getting cached data")
return(I)
# If the value of Inverse is NOT null (was previously calculated), cacheSolve returns that value
}
# If the value of Inverse is NULL, then you retrive matrix x and calculate the inverse with the solve() function
message("newly calculating data")
data <- x$get()
I <- solve(data, ...)
x$setInverse(I)
# Sets Inverse to the newly calculated value
I #Returns the new Inverse value
}
M <- makeCacheMatrix()
V <- makeVector()
class(M)
class(M$set)
class(V$set)
M$set(matrix(1:4, 2, 2))
M$get()
M$getInverse()
M$setInverse(9)
cacheSolve(M)
M$setInverse(NULL)
cacheSolve(M)
M$getInverse()
M$set(matrix(1:9, 3, 3))
M$getInverse()
cacheSolve(M)
M_I <- M$getInverse()
M1 <- M$get()
M1 %*% M_I
A <- magic(5)
install.packages("magic")
install.packages("magic")
library(magic)
A <- magic(5)
A
B <- makeCacheMatrix(A)
names(B)
B$get()
B$getInverse()
cacheSolve(B)
B$getInverse()
B$set(A)
C <- cacheSolve(B)
# This sets matrix C to the B, which is the inverse of matrix A
B$set(C)
B$getInverse()
cacheSolve(B)
makeCacheMatrix(matrix(1:9,3,3))
T<-makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(T)
T<-makeCacheMatrix(matrix(1:2,3,3))
cacheSolve(T)
T<-makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(T)
T<-makeCacheMatrix(matrix(2:10,3,3))
cacheSolve(T)
T<-makeCacheMatrix(matrix(2:10,4,4))
cacheSolve(T)
T<-makeCacheMatrix(matrix(1:16,4,4))
cacheSolve(T)
source('~/.active-rstudio-document')
T<-makeCacheMatrix(matrix(1:16,4,4))
cacheSolve(T)
T<-makeCacheMatrix(matrix(1:16,4,4))
T$setInverse()
T$setInverse(T)
cacheSolve(T)
cacheSolve(T)
source('~/.active-rstudio-document')
T<-makeCacheMatrix(matrix(1:16,4,4))
T$setInverse(T)
cacheSolve(T)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
T<-makeCacheMatrix(matrix(1:16,4,4))
T$setInverse(T)
cacheSolve(T)
cacheSolve(T)
I
M<-makeCacheMatrix()
class(M)
class(M$set)
M$set(matrix(1:4,2,2))
M$get()
M$getImverse()
M$getInverse()
M$setInverse()
M$setInverse(9)
M$getInverse()
cacheSolve(M)
cacheSolve(M)
M$setInverse(NULL)
cacheSolve(M)
cacheSolve(M)
cacheSolve(M)
M$setInverse(NULL)
cacheSolve(M)
cacheSolve(M)
MI <- M$getInverse()
M1 <- M$get()
M1 %*% MI
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
mean(x)
traceback()
lm(x~y)
traceback()
debug(lm)
lm(x~y)
n
options(error=recover)
read.csv("nosuchfile")
str(lm)
str(str)
x <-rnorm(100,2,4)
summary(x)
str(x)
f <- gl(40,100)
str(f)
summary(f)
m <- matrix(rnorm(100,10,10))
str(m)
m[,1]
x<-rnorm(100)
x
x<-rnorm(10,20,2)
x
summary(x)
str(x)
x<-rnorm(10,20,2)
x
set.seed(1.5)
x<-rnorm(10,20,2)
x
x<-rnorm(10,20,2)
x
set.seed(1.5)
x<-rnorm(10,20,2)
x
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y <- 0.5+2*x+e
plot(x,y)
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom()
x<-rbinom(456)
system.time(readlines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
traceback()
debug(0)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL")
install.packages(“RMySQL”, type = “source”)
install.packages("httr")
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
?oauth_app()
myapp <- oauth_app("github", "cae381b4455e3c5f24b944b378fc7a597400e564")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "cae381b4455e3c5f24b944b378fc7a597400e564")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(hhtpuv)
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
oauth_endpoints("github")
myapp <- oauth_app("github", key="6a6404b2c74d2efb2cfa", secret="cae381b4455e3c5f24b944b378fc7a597400e564")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
a[4]
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
a <- content(req)
a
a[4]
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
a[4]
a[]
a[30]
str(a)
pp<-str(a)
head(pp)
pp
install.packages("sqldf")
library(sqldf)
acs<-https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
acs<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
?read.csv.sql
acs <- read.csv.sql("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
setwd("~/Coursera/Getting and Cleaning Data")
setwd("~/Coursera/Getting and Cleaning Data")
acs <- read.csv.sql("getdata-data-ss06pid.csv")
acd
acs
head(acs)
str(acs)
acs <- read.csv("getdata-data-ss06pid.csv")
head(acs)
str(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
head(sqldf("select pwgtp1 AGEP from acs where AGEP < 50"),20)
head(sqldf("select pwgtp1, AGEP from acs where AGEP < 50"),20)
head(sqldf("select pwgtp1, AGEP from acs where AGEP > 50"),20)
unique(acs$AGEP)
cpunt(unique(acs$AGEP))
count(unique(acs$AGEP))
?count
??count
num(unique(acs$AGEP))
unique(acs$AGEP)
?length
length(unique(acs$AGEP))
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select unique * from acs")
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
install.packages("XML")
library(xml)
library(XML)
htmlpp <- readlines("")
htmlpp <- readLines("http://biostat.jhsph.edu/~jleek/contact.html")
htmlpp
htmlpp[10]
htmlpp[166]
nchar(htmlpp[10,20,30,100])
nchar(htmlpp[c(10,20,30,100)])
q5 <- readLines("getdata-wksst8110.for")
q5
str(q5)
head(q5)
q5 <- readLines("getdata-wksst8110.for")
head(q5)
q5 <- fread("getdata-wksst8110.for")
install.packages("data.table")
library(data.table)
q5 <- fread("getdata-wksst8110.for")
q5
head(q5,20)
q5 <- fread("getdata-wksst8110.for", skip=2)
head(q5,20)
q5 <- fread("getdata-wksst8110.for", skip=2L)
head(q5,20)
str(q5)
q5 <- fread("getdata-wksst8110.for", skip=3L)
q5
q5 <- fread("getdata-wksst8110.for", skip=3)
q5 <- fread("getdata-wksst8110.for")
str(q5)
q5 <- read.fwf("getdata-wksst8110.for",c(16,4,7,4,7,4,7,4,4))
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(16,4,7,4,7,4,7,4,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(13,4,7,4,7,4,7,4,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(16,4,skip=4)
q5 <- read.fwf("getdata-wksst8110.for",c(16,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(9,4,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(10,4,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(16,4,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(15,4,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(10,3,4,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(15,4,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(15,4,7,4),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(15,4,9,4,9,4,9),skip=4)
head(q5,20)
q5 <- read.fwf("getdata-wksst8110.for",c(15,4,9,4,9,4,9,4,4),skip=4)
head(q5,20)
sum(v4)
sum(q5$v4)
sum(q5[,v4])
str(q5)
?sum
colsum(q5[,v4])
colsums(q5[,v4])
colSums(q5[,v4])
colSum(q5[,v4])
colSums(q5$v4)
colSums(q5[$v4])
colSums(q5[v4])
colSums(q5[,v4])
colSums(q5[,"v4"])
colSums(q5[,])
colSums(q5[1,2])
q5
q5[1]
q5[2]
sum(q5[2])
sum(q5[4])
setwd("~/Coursera/Getting and Cleaning Data/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
read.table("C:\Users\LuisD\Documents\Coursera\Getting and Cleaning Data\getdata-projectfiles-UCI HAR Dataset\UCI HAR Dataset\test\X_test.txt")
read.table("test/X_test.txt")
getwd()
if (!require("data.table")) {
install.packages("data.table")
}
if (!require("reshape2")) {
install.packages("reshape2")
}
require("data.table")
require("reshape2")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
getwd()
setwd("~/Coursera/Getting and Cleaning Data/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
if (!require("data.table")) {
install.packages("data.table")
}
if (!require("reshape2")) {
install.packages("reshape2")
}
require("data.table")
require("reshape2")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Load: data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extract only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
# Load and process X_test & y_test data.
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
getwd()
activity_labels <- read.table("/activity_labels.txt")[,2]
activity_labels <- read.table("activity_labels.txt")[,2]
source('~/Coursera/Getting and Cleaning Data/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/run_analysis.R')
activity_labels <- read.table("activity_labels.txt")[,2]
features <- read.table("features.txt")[,2]
# Extract only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
# Load and process X_test & y_test data.
X_test <- read.table("./test/X_test.txt")
y_test <- read.table("./test/y_test.txt")
subject_test <- read.table("./test/subject_test.txt")
names(X_test) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_test = X_test[,extract_features]
# Load activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Bind data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Load and process X_train & y_train data.
X_train <- read.table("./train/X_train.txt")
y_train <- read.table("./train/y_train.txt")
subject_train <- read.table("./train/subject_train.txt")
names(X_train) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_train = X_train[,extract_features]
# Load activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Bind data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merge test and train data
data = rbind(test_data, train_data)
id_labels   = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data      = melt(data, id = id_labels, measure.vars = data_labels)
# Apply mean function to dataset using dcast function
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./tidy_data.txt")
View(tidy_data)
View(tidy_data)
ls()
activity labels
activity_labels
length(activity_labels)
X_train <- read.table("./train/X_train.txt")
features
View(X_test)
extract_features
activity_labels
features
extract_features
extract_features[,]
extract_features[]
X_test <- read.table("./test/X_test.txt")
head(x_test,20
)
head(X_est,20)
head(X_test,20)
head(X_test)
y_test <- read.table("./test/y_test.txt")
head(y_test)
subject_test
names(X_test)
features
names(X_test)
features
source('~/Coursera/Getting and Cleaning Data/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/run_analysis.R')
